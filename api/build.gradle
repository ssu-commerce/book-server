plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id "org.sonarqube" version "3.5.0.2730"
    id "jacoco"
    id 'idea'
}

idea {
    module {
        sourceDirs += file("$rootDir/grpc/src/generated/main/java")
        sourceDirs += file("$rootDir/grpc/src/generated/main/grpc")
    }
}

dependencies {
    implementation project(":grpc")

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'org.redisson:redisson-spring-boot-starter:3.21.1'
    // Querydsl
    implementation("com.querydsl:querydsl-jpa:$queryDSLVersion")
    implementation "com.querydsl:querydsl-apt:$queryDSLVersion"
    implementation "com.querydsl:querydsl-core:$queryDSLVersion"

    // JPA Log
    implementation 'p6spy:p6spy:3.9.1'
    //ssu-commerce core
    implementation("com.ssu.commerce:ssu-commerce-core-web:$coreVersion")
    implementation("com.ssu.commerce:ssu-commerce-core-security:$coreVersion")
    implementation("com.ssu.commerce:ssu-commerce-core-jpa:$coreVersion")
    // LocalDateTime serialize for test
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.5'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: "$mapstructVersion"
    implementation "org.testcontainers:testcontainers:1.17.6"
    // for grpc
    implementation ("com.ssu.commerce.order:grpc:$grpcVersion")
    implementation 'link.jfire:simplerpc:1.0'
    implementation 'io.github.HuChen-dot:simplerpc-spring-boot-starter:1.6'
    implementation 'net.devh:grpc-server-spring-boot-starter:2.13.1.RELEASE'
    implementation 'net.devh:grpc-client-spring-boot-starter:2.13.1.RELEASE'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compileOnly 'org.projectlombok:lombok'
    compileOnly group: 'org.mapstruct', name: 'mapstruct-processor', version: "$mapstructVersion"

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: "$mapstructVersion"

    // for test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Spring Security Test
    testImplementation 'org.springframework.security:spring-security-test:5.6.2'
    // testContainers
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.testcontainers:mysql:1.17.6'
    testImplementation 'org.testcontainers:jdbc:1.17.6'

    testCompileOnly 'org.projectlombok:lombok'

    testAnnotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: "$mapstructVersion"
}

tasks.named('test') {
    useJUnitPlatform()
}

//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

bootJar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        csv.required = false

        xml.required = true
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")

        html.required = true
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in "*.QA".."*.QZ") {
        Qdomains.add(qPattern + "*")
    }

    violationRules {
        rule {
            enabled = true
            // 룰을 체크할 단위(BUNDLE, PACKAGE, CLASS, SOURCEFILE, METHOD)
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 300
            }

            excludes = [
                    '*test*',
                    '*resources*',
                    '*MapperImpl*',
                    '**.config.*',
                    '*Exception*'
            ] + Qdomains
        }
    }
}
