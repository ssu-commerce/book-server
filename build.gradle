plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
	id "org.sonarqube" version "4.2.1.3168"
	id 'java'
	id 'jacoco'
}

group = 'com.ssu.commerce'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		name = "GitHubPackages"
		url = uri("https://maven.pkg.github.com/ssu-commerce/ssu-commerce-core")
		credentials {
			username = project.findProperty("gpr.user") == null ? System.getenv("USERNAME") : project.findProperty("gpr.user")
			password = project.findProperty("gpr.key") == null ? System.getenv("TOKEN") : project.findProperty("gpr.key")
		}
	}

}

ext {
	coreVersion="2023.07.4"
	mapstructVersion = '1.5.5.Final'
	queryDSLVersion = '5.0.0'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'

	// JPA Log
	implementation 'p6spy:p6spy:3.9.1'

	// Querydsl
	implementation("com.querydsl:querydsl-jpa:${queryDSLVersion}")
	implementation "com.querydsl:querydsl-apt:${queryDSLVersion}"
	implementation "com.querydsl:querydsl-core:${queryDSLVersion}"

	// mapstruct
	implementation group: 'org.mapstruct', name: 'mapstruct', version: "${mapstructVersion}"
	compileOnly group: 'org.mapstruct', name: 'mapstruct-processor', version: "${mapstructVersion}"

	annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: "${mapstructVersion}"

	//for test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation "com.querydsl:querydsl-jpa:${queryDSLVersion}"

//	testAnnotationProcessor "com.querydsl:querydsl-apt:${queryDSLVersion}:jpa"
	testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: "${mapstructVersion}"

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	//ssu-commerce core
	implementation("com.ssu.commerce:ssu-commerce-core:$coreVersion")

	// testContainers
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
	testImplementation 'org.testcontainers:mysql:1.17.6'
	testImplementation 'org.testcontainers:jdbc:1.17.6'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
	finalizedBy 'jacocoTestCoverageVerification'
}

//querydsl 추가
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝

sonar {
	properties {
		property "sonar.projectKey", "book-server"
		property "sonar.projectName", "book-server"
		property "sonar.exclusions", "**/*Generated.java"
	}
}

jacoco {
	toolVersion = "0.8.10"
}

jacocoTestReport {
	reports {
		xml.enabled true // sonarqube 분석에 필요한 xml파일만 생성
		xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")

		csv.enabled false
		html.enabled true
	}

}

def sonarToken = project.findProperty("sonar.token") == null ? System.getenv("SONAR_TOKEN") : project.findProperty("sonar.token")

sonar {
	properties {
		property "sonar.host.url", "http://ing-sonarqubedce-sonarqu-183cf-19211729-23788634d0d0.kr.lb.naverncp.com"
		property "sonar.token", "${sonarToken}"
		property "sonar.projectKey", "book-server"
		property "sonar.projectName" , "book-server"
		property "sonar.sources", "src"
		property "sonar.language", "java"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.profile", "Sonar way"
		property "sonar.java.binaries", "${buildDir}/classes"
		property "sonar.test.inclusions", "**/*Test.java"
		property "sonar.exclusions", "**/resources/static/**, **/Q*.class, **/test/**"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
	}
}
